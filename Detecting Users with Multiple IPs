This can be used to Exam VPN logs as well as Transactions.
The Key point here is same user shouldn't show up at two physical locations.
One can get fancy by filtering out known safe country_name, or do some distance calculation from the two points.


// first line, search for the logs that you want to find the src_ip
_sourceCategory=security_monty _sourceName=*network.log vpn 
| parse "Vpn-dmz:*/* to inside:*(*)" as ip,_b, inside,user 
// I use _b as place holder for fields that I don't care
// The connection variable is not used, I'm just using it as a way to identify the type of log to join
| join (parse "connection * for" as connection ) as t1
, (parse "connection * for" as connection) as t2
on t1.user = t2.user timewindow 30m
| lookup latitude, longitude, country_code, country_name, region, city, postal_code, area_code, metro_code from geo://default on t1_ip = ip
| lookup latitude as lat2, longitude as long2, country_code as country_code2, country_name as country_name2, region as region2, city as city2, postal_code as postal_code2, area_code as area_code2, metro_code as metro_code2 from geo://default on t2_ip = ip 
| if  (isNull(country_code), "unknown", country_code) as country_code
| if  (isNull(country_code2), "unknown", country_code2) as country_code2
// the wheres will filter out the self-join and duplicates.
| where t1__messagetime != t2__messagetime | where t1__messagetime < t2__messagetime
| where !(country_code matches "unknown") AND !(country_code2 matches "unknown") AND country_code != country_code2
// Formatting the date so they look nice
| formatDate(fromMillis(t1__messagetime), "MM-dd HH:mm:ss") as myDate1
| formatDate(fromMillis(t2__messagetime), "MM-dd HH:mm:ss") as myDate2
| fields t1_ip,t2_ip,t1_user,t2_user,country_code,country_code2,myDate1,myDate2
